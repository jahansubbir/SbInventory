@model SbInventory.Models.SBReceive

@{
    ViewBag.Title = "ReceiveNegative";
}
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/animate.min.css" rel="stylesheet" />
<link href="~/Content/w3.css" rel="stylesheet" />
<h2>Receive Negative</h2>
@if (ViewBag.Message != null)
{
    <div class="bounce">
        @ViewBag.Message
    </div>
}

@using (Html.BeginForm(null,null,FormMethod.Post,new {@id="ReceiveForm"})) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>SBReceive</h4>
        <hr />
        @Html.ValidationSummary(true)

        @*<div class="form-group">
            @Html.LabelFor(model => model.DRDate, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DRDate)
                @Html.ValidationMessageFor(model => model.DRDate)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DRTime, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DRTime)
                @Html.ValidationMessageFor(model => model.DRTime)
            </div>
        </div>*@
        <div class="w3-card-4" style="margin-top: 300px; margin-left: 300px; max-width: 600px">
            <div class="form-group">
                @Html.LabelFor(model => model.EID, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EID)
                    @Html.ValidationMessageFor(model => model.EID)
                </div>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.Remarks, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Remarks)
                    @Html.ValidationMessageFor(model => model.Remarks)
                </div>
            </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.SBDSBId, "SBDSB", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("SBDSBId", "Select")
                    @Html.ValidationMessageFor(model => model.SBDSBId)
                </div>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Status)
                    @Html.ValidationMessageFor(model => model.Status)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DIDId, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DIDId)
                    @Html.ValidationMessageFor(model => model.DIDId)
                </div>
            </div>*@

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    @*<input type="submit" value="Create" class="btn btn-default" />*@
                    <button class="btn btn-large btn-default" id="Status" name="Status" value="Negative">Receive Negative</button>
                </div>
            </div>
            </div>
        </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script>
        $(document).ready(function() {
            $("#ReceiveForm").validate({
                    rules: {
                        EID: {
                            required: true,
                            minlength: 15,
                            maxlength:15
                        },
                        SBDSBID: {
                            required:true
                        }
                    },
                messages: {
                    EID: {
                        required: "EID cannot be empty",
                        minlength: "EID must be 15 character long",
                        maxlength: "EID must be 15 character long"
                    }
                }, errorPlacement: function (label, element) {
                    label.class('error');
                    label.insertAfter(element);
                }
                }
              
                );
        });
    </script>

}
